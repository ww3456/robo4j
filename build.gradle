plugins {
    id "org.flywaydb.flyway" version "4.2.0"
}

group 'com.robo4j'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'


apply from: 'libraries.gradle'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
}

project("robo4j-core") {
    description = "Robo4J Core"

    group 'com.robo4j'
    version "${robo4jVersion}"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        compile(project(":robo4j-page"))
        compile(project(":robo4j-http"))
        testCompile "junit:junit:${junitVersion}@jar"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestAllVersion}@jar"
    }
}

project("robo4j-db-sql") {

    description = "Robo4J Database SQL"

    group 'com.robo4j'
    version "${robo4jVersion}"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'
    apply plugin: "org.flywaydb.flyway"

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        compile(project(":robo4j-core"))
        compile "org.flywaydb:flyway-core:${flywayVersion}"
        compile "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:${hibernateJpaVersion}"
        compile "org.postgresql:postgresql:${postgresqlVersion}"
        compile "org.hibernate:hibernate-core:${hibernateVersion}"
        compile "com.h2database:h2:${h2Version}"
        testCompile project(':robo4j-core').sourceSets.test.output
        testCompile "junit:junit:${junitVersion}@jar"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestAllVersion}@jar"
    }

    //main db
    flyway {
//        url = 'jdbc:h2:~/data/robo4j1h2'
//        user = 'sa'
        url = 'jdbc:postgresql://localhost:5433/robo4j1'
        user = 'postgres'
        password = 'post'
        schemas = ['public']
    }
}

project("robo4j-hw-lego") {
    description = "Robo4J Lego Hardware"

    group 'com.robo4j'
    version "${robo4jVersion}"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

    repositories {
        mavenCentral()
        mavenLocal()
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "${mavenRepository}")
            }
        }
    }

    //sources
    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', 'src/examples/java', 'src/test/java']
            }
            resources {
                srcDirs = ['src/main/resources', 'src/examples/resources', 'src/test/resources']
            }
        }
    }

    dependencies {
        compile fileTree(dir: 'libs', include: 'ev3classes-9.1.jar')
        compile(project(":robo4j-math"))
        testCompile "junit:junit:${junitVersion}"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestAllVersion}"
    }
}

project("robo4j-hw-rpi") {
    description = "Robo4J RaspberryPi Hardware"

    group 'com.robo4j'
    version "${robo4jVersion}"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "${mavenRepository}")
            }
        }
    }

    //create a single Jar with all dependencies
    task fatJar(type: Jar) {
        manifest {
            attributes 'Implementation-Title': 'robo4j-hw-rpi',
                    'Implementation-Version': version,
                    'Main-Class': 'com.robo4j.hw.rpi.i2c.magnetometer.MagnetometerLSM303MatrixTest'
        }
        //baseName = project.name + '-all'
        baseName = 'robo4j-hw-rpi'
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }

    //sources
    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', 'src/examples/java', 'src/test/java']
            }
            resources {
                srcDirs = ['src/main/resources', 'src/examples/resources', 'src/test/resources']
            }
        }
    }

    dependencies {
        compile(project(":robo4j-math"))
        compile "com.pi4j:pi4j-core:${pi4jVersion}"
        testCompile "junit:junit:${junitVersion}"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestAllVersion}"
    }
}

project("robo4j-math") {
    description = "Robo4J Math"

    group 'com.robo4j'
    version "${robo4jVersion}"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        testCompile "junit:junit:${junitVersion}"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestAllVersion}"
    }
}


project("robo4j-http") {
    description = "Robo4j Http"

    group 'com.robo4j'
    version "${robo4jVersion}"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        testCompile "junit:junit:${junitVersion}"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestAllVersion}"
    }
}

project("robo4j-page") {
    description = "Robo4J Page"

    group 'com.robo4j'
    version "${robo4jVersion}"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        testCompile "junit:junit:${junitVersion}@jar"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestAllVersion}@jar"
    }
}

project("robo4j-units-lego") {
    description = "Robo4J Lego Abstractions"

    group 'com.robo4j'
    version "${robo4jVersion}"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "${mavenRepository}")
            }
        }
    }

    dependencies {
        compile(project(":robo4j-hw-lego"))
        compile(project(":robo4j-core"))
        testCompile "junit:junit:${junitVersion}"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestAllVersion}"
    }
}

project("robo4j-units-rpi") {
    description = "Robo4J Raspberry Pi"

    group 'com.robo4j'
    version "${robo4jVersion}"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "${mavenRepository}")
            }
        }
    }

    //create a single Jar with all dependencies
    task fatJar(type: Jar) {
        manifest {
            attributes 'Implementation-Title': 'robo4j-units-rpi',
                    'Implementation-Version': version,
                    'Main-Class': 'com.robo4j.units.rpi.lidarlite.LaserScannerExample'
        }
        //baseName = project.name + '-all'
        baseName = 'robo4j-units-rpi'
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }

    //sources
    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', 'src/examples/java', 'src/test/java']
            }
            resources {
                srcDirs = ['src/main/resources', 'src/examples/resources', 'src/test/resources']
            }
        }
    }

    dependencies {
        compile(project(":robo4j-hw-rpi"))
        compile(project(":robo4j-core"))
        testCompile "junit:junit:${junitVersion}"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestAllVersion}"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "${gradleVersion}"
}

/* global settings */
configure(allprojects) { project ->
    group = "com.robo4j"

    compileJava.options*.compilerArgs = [
            "-Xlint:unchecked", "-Xlint:rawtypes",
    ]

    compileTestJava.options*.compilerArgs = [
            "-Xlint:deprecation", "-Xlint:unchecked", "-Xlint:rawtypes",
    ]
}
